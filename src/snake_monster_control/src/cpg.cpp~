
#include "cpg.hpp" 

using namespace std;

typedef struct State_ {
  double proximal; // proximal joint angle
  double intermediate; // intermediate joint angle
  double distal; // distal joint angle
} State;

State current_state;

//ros::Publisher pub_joint_commands_;

// Intial Values for CPG parameters as defined in the paper
// equations 17 and 18
int w = 5; // control forward velocity not oscillation
int n = 4; // can be 2 if circular limit cycle is desired
double a = M_PI/180 , b = M_PI/6;
double alpha = 0.25; 
int epsi=40;

// CPG constant offset of limit cycle
double C_x0 [6] = {M_PI/4, M_PI/4, 0, 0, -M_PI/4, -M_PI/4}; // will be constant 

//C_y0 will be constant too since it is only gets updated for the purpose of inertial feedback
double C_y0 [6] = {M_PI/16, M_PI/16, M_PI/16, M_PI/16, M_PI/16, M_PI/16};

// Coupling matrix intially
// eq 16
int K[6][6] = {{0, -1, -1, 1, 1, -1},
			   {-1, 0, 1, -1, -1, 1},
			   {-1, 1, 0, -1, -1, 1},
			   {1, -1, -1, 0, 1, -1},
			   {1, -1, -1, 1, 0, -1},
			   {-1, 1, 1, -1, -1, 0}};

			   
int main(int argc, char **argv)
{
  ros::init(argc, argv, "cpg");
  ros::NodeHandle nh;
  
  ros::Time begin = ros::Time::now();

  //double dt = (current_time - last_integrate).toSec();
  double dt = 0.001;
  
  int x=0, y=0;
  int i =1; 

  double H_c = pow( (x-C_x0[i])/a, n) + pow( (y-C_y0[i])/b, n);
  double H_c_y = ((double)(n/b) * ( pow ( (y - (C_y0[i])/b) , n-1))); // H_c_y
  double H_c_x = ((double)(n/a) * (pow ( ( (double)y - C_x0[i])/a , (double)n-1))); // H_c_x

  // equations 15 of the paper 
  double X_dot = (-w * H_c_y) + (epsi*(1 - H_c)* H_c_x); 
  
  //for (int i=1 , i<) loop over the every K column -> multi -> sum all
  // the o/p should be multiplied to the alpha 
  
  double Y_dot = (-w * H_c_x) + (epsi*(1 - H_c)* H_c_y) + alpha; 
  // the previous equation should hold the summation of vector K "j" for every leg "i"

  ros::Time last_integrate = ros::Time::now();

  ///////////////////////////////////////////////////////////////////////
  // Integration eq should be done here ! 
  ///////////////////////////////////////////////////////////////////////

  // update time to be used in the next integration step
  ros::Time current_time = ros::Time::now();


   //cout<<"x"<<setw(19)<<"y"<<setw(19)<<"dy/dx"<<setw(16)<<"y_new\n";

  //ros::Publisher L5_3_pub = nh.advertise<std_msgs::Float64> ("/snake_monster/L5_3_eff_pos_controller/command", 100);

}
