
#include "joint_commander.hpp" 

using namespace std;

ros::Publisher pub_joint_commands_;



// Intial Values for CPG parameters as defined 

int w = 5;
int n = 4; // can be 2 if circular limit cycle is desired
double a = M_PI/180 , b = M_PI/6;
double alpha = 0.25; 
int epsi=40;

// CPG constant offset of limit cycle
double C_x0 [6] = {M_PI/4, M_PI/4, 0, 0, -M_PI/4, -M_PI/4}; // will be constant 

double C_y0 [6] = {M_PI/16, M_PI/16, M_PI/16, M_PI/16, M_PI/16, M_PI/16};

// Coupling matrix intially

int K[6][6] = {{0, -1, -1, 1, 1, -1},
			   {-1, 0, 1, -1, -1, 1},
			   {-1, 1, 0, -1, -1, 1},
			   {1, -1, -1, 0, 1, -1},
			   {1, -1, -1, 1, 0, -1},
			   {-1, 1, 1, -1, -1, 0}};



			   
int main(int argc, char **argv)
{
  ros::init(argc, argv, "joint_commander");
  ros::NodeHandle nh;
  int x=0, y=0;
  int i =1; 
  double H_c = pow(((double)x-C_x[i])/a, n) + pow(((double)y-C_y0[i])/b, n);
  double H_c_y = ((n/b) * (pow(((double)y - C_y0[i])/b) , n-1)); // H_c_y
  double H_c_x = ((n/a) * (pow(((double)y - C_x0[i])/a) , n-1)); // H_c_x

  double X_dot = (-w * H_c_y) + (epsi*(1 - H_c)* H_c_x); 

   //cout<<"x"<<setw(19)<<"y"<<setw(19)<<"dy/dx"<<setw(16)<<"y_new\n";

  ros::Publisher L5_3_pub = nh.advertise<std_msgs::Float64>
    ("/snake_monster/L5_3_eff_pos_controller/command", 100);

}
